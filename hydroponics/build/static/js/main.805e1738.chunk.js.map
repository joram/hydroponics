{"version":3,"sources":["graph.jsx","App.js","reportWebVitals.js","index.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","GraphComponent","props","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","LineChart","data","XAxis","dataKey","YAxis","CartesianGrid","stroke","strokeDasharray","Line","type","data_key","App","isLoaded","setIsLoaded","setData","fetch","then","res","json","result","latestDatapoint","slice","length","PH","Conductivity","console","log","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAGA,SAASA,IAAuB,IAAD,EACsBC,OACnD,MAAO,CACLC,MAH2B,EACrBC,WAGNC,OAJ2B,EACFC,aAwCdC,MAhBf,SAAwBC,GAAQ,IACvBL,EAlBT,WAAgC,IAAD,EACmBM,mBAASR,KAD5B,mBACtBS,EADsB,KACJC,EADI,KAY7B,OATAC,qBAAU,WACR,SAASC,IACPF,EAAoBV,KAItB,OADAC,OAAOY,iBAAiB,SAAUD,GAC3B,kBAAMX,OAAOa,oBAAoB,SAAUF,MACjD,IAEIH,EAMUM,GAAVb,MACP,OACI,eAACc,EAAA,EAAD,CACId,MAAOA,EACPE,OAAQG,EAAMH,OACda,KAAMV,EAAMU,KAHhB,UAKE,cAACC,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAeC,OAAO,OAAOC,gBAAgB,QAC7C,cAACC,EAAA,EAAD,CAAMC,KAAK,WAAWN,QAASZ,EAAMmB,SAAUJ,OAAO,gBCI/CK,MAtCf,WAAgB,IAAD,EACmBnB,oBAAS,GAD5B,mBACNoB,EADM,KACIC,EADJ,OAEWrB,mBAAS,IAFpB,mBAENS,EAFM,KAEAa,EAFA,KAcb,GAVAnB,qBAAU,WACVoB,MAAM,gBACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACHL,EAAQK,EAAM,MACdN,GAAY,QAGf,KAEED,EACH,OAAO,6CAGT,IAAIQ,EAAkBnB,EAAKoB,OAAO,GAAG,GASrC,OAR8B,IAA1BpB,EAAKoB,OAAO,GAAGC,SACfF,EAAkB,CACdG,GAAI,IACJC,aAAc,MAGtBC,QAAQC,IAAIzB,EAAKoB,OAAO,GAAID,GAG1B,sBAAKO,UAAU,MAAf,UACE,6CAAgBP,EAAe,GAA/B,OACA,cAAC,EAAD,CAAgBnB,KAAMA,EAAMS,SAAS,KAAKtB,OAAQ,MAElD,gDAAmBgC,EAAe,aAAlC,OACA,cAAC,EAAD,CAAgBnB,KAAMA,EAAMS,SAAS,eAAetB,OAAQ,UC1BnDwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.805e1738.chunk.js","sourcesContent":["import {CartesianGrid, Line, LineChart, XAxis, YAxis} from \"recharts\";\nimport {useEffect, useState} from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nfunction useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n\n\n\nfunction GraphComponent(props) {\n  const {width } = useWindowDimensions();\n  return (\n      <LineChart\n          width={width}\n          height={props.height}\n          data={props.data}\n      >\n        <XAxis dataKey=\"name\"/>\n        <YAxis/>\n        <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\"/>\n        <Line type=\"monotone\" dataKey={props.data_key} stroke=\"#8884d8\" />\n      </LineChart>\n  )\n}\n\nexport default GraphComponent;","import './App.css';\nimport GraphComponent from \"./graph\";\nimport {useEffect, useState} from \"react\";\n\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n  fetch(\"/api/v0/data\")\n    .then(res => res.json())\n    .then((result) => {\n        setData(result[\"data\"]);\n        setIsLoaded(true);\n      }\n    )\n  }, [])\n\n  if (!isLoaded) {\n    return <div>Loading...</div>;\n  }\n\n  let latestDatapoint = data.slice(-1)[0]\n  if (data.slice(-1).length === 0){\n      latestDatapoint = {\n          PH: \"?\",\n          Conductivity: \"?\",\n      }\n  }\n  console.log(data.slice(-1), latestDatapoint)\n\n  return (\n    <div className=\"App\">\n      <h2>PH levels ({latestDatapoint[\"PH\"]})</h2>\n      <GraphComponent data={data} data_key=\"PH\" height={500}/>\n\n      <h2>Conductivity ({latestDatapoint[\"Conductivity\"]})</h2>\n      <GraphComponent data={data} data_key=\"Conductivity\" height={500}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}